[{"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\index.js":"1","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\config.js":"2","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\Config.js":"3","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\services\\token-service.js":"4","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\App\\App.js":"5","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Utils\\PublicOnlyRoute.js":"6","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Utils\\PrivateRoute.js":"7","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Logo\\Logo.js":"8","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ContactForm\\ContactForm.js":"9","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Nav\\Nav.js":"10","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ImageSlider\\ImageSlider.js":"11","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Icons\\Icons.js":"12","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\LoginForm\\LoginForm.js":"13","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\RegistrationForm\\RegistrationForm.js":"14","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\RegisterPage\\RegisterPage.js":"15","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\ContactPage\\ContactPage.js":"16","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\HomePage\\HomePage.js":"17","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\LoginPage\\LoginPage.js":"18","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\UserDashboard\\UserDashboard.js":"19","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\NotFoundPage\\NotFoundPage.js":"20","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Validator\\Validator.js":"21","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Sidebar\\Sidebar.js":"22","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Sidebar\\SidebarData.js":"23","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\SearchPage\\SearchPage.js":"24","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\SearchForm\\SearchForm.js":"25","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\ResultsPage\\ResultsPage.js":"26","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ResultsList\\ResultsList.js":"27","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ResultItem\\ResultItem.js":"28","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\CourseDetailPage\\CourseDetailPage.js":"29","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\UserCourseList\\UserCourseList.js":"30","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\UserCourseListItem\\UserCourseListItem.js":"31","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\CourseDetail\\CourseDetail.js":"32","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Spinner\\Spinner.js":"33"},{"size":257,"mtime":1612031402252,"results":"34","hashOfConfig":"35"},{"size":106,"mtime":1612041490660,"results":"36","hashOfConfig":"35"},{"size":112,"mtime":1607374459805,"results":"37","hashOfConfig":"35"},{"size":448,"mtime":1612031310967,"results":"38","hashOfConfig":"35"},{"size":1458,"mtime":1612031209647,"results":"39","hashOfConfig":"35"},{"size":473,"mtime":1608833154507,"results":"40","hashOfConfig":"35"},{"size":537,"mtime":1608833159116,"results":"41","hashOfConfig":"35"},{"size":427,"mtime":1612030776178,"results":"42","hashOfConfig":"35"},{"size":5536,"mtime":1612031149947,"results":"43","hashOfConfig":"35"},{"size":265,"mtime":1612030758006,"results":"44","hashOfConfig":"35"},{"size":1143,"mtime":1612030802118,"results":"45","hashOfConfig":"35"},{"size":1263,"mtime":1612031113697,"results":"46","hashOfConfig":"35"},{"size":2956,"mtime":1612031557245,"results":"47","hashOfConfig":"35"},{"size":10593,"mtime":1612031095524,"results":"48","hashOfConfig":"35"},{"size":504,"mtime":1612031299053,"results":"49","hashOfConfig":"35"},{"size":869,"mtime":1612122520449,"results":"50","hashOfConfig":"35"},{"size":1211,"mtime":1612030513414,"results":"51","hashOfConfig":"35"},{"size":462,"mtime":1612031294347,"results":"52","hashOfConfig":"35"},{"size":2757,"mtime":1612031307799,"results":"53","hashOfConfig":"35"},{"size":491,"mtime":1612031021505,"results":"54","hashOfConfig":"35"},{"size":918,"mtime":1612030529067,"results":"55","hashOfConfig":"35"},{"size":1824,"mtime":1612031076375,"results":"56","hashOfConfig":"35"},{"size":588,"mtime":1611335965563,"results":"57","hashOfConfig":"35"},{"size":1388,"mtime":1612030976431,"results":"58","hashOfConfig":"35"},{"size":8969,"mtime":1612030865225,"results":"59","hashOfConfig":"35"},{"size":1785,"mtime":1612031302099,"results":"60","hashOfConfig":"35"},{"size":8259,"mtime":1612031090535,"results":"61","hashOfConfig":"35"},{"size":922,"mtime":1612030697046,"results":"62","hashOfConfig":"35"},{"size":1493,"mtime":1612031032882,"results":"63","hashOfConfig":"35"},{"size":668,"mtime":1612031071462,"results":"64","hashOfConfig":"35"},{"size":1736,"mtime":1612031067831,"results":"65","hashOfConfig":"35"},{"size":5307,"mtime":1612030815584,"results":"66","hashOfConfig":"35"},{"size":334,"mtime":1611120316556,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1txen4g",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\index.js",[],["148","149"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\config.js",["150"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\Config.js",["151"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\services\\token-service.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\App\\App.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Utils\\PublicOnlyRoute.js",[],["152","153"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Utils\\PrivateRoute.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Logo\\Logo.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ContactForm\\ContactForm.js",["154","155","156","157","158"],"import React from 'react';\r\nimport Validator from '../Validator/Validator';\r\nimport config from '../../config';\r\nimport './ContactForm.css';\r\n\r\nclass ContactForm extends React.Component {\r\n  state = {\r\n    name: {\r\n      value: '',\r\n      touched: false,\r\n    },\r\n    emailAddress: {\r\n      value: '',\r\n      touched: false,\r\n    },\r\n    subject: {\r\n      value: '',\r\n      touched: false,\r\n    },\r\n    message: {\r\n      value: '',\r\n      touched: false,\r\n    },\r\n    error: null\r\n  }\r\n\r\n  onNameChange = (name) => {\r\n    this.setState({\r\n      name: { value: name, touched: true }\r\n    })\r\n  }\r\n  \r\n  onEmailAddressChange = (emailAddress) => {\r\n    this.setState({\r\n      emailAddress: { value: emailAddress, touched: true }\r\n    })\r\n  }\r\n\r\n  onSubjectChange = (subject) => {\r\n    this.setState({\r\n      subject: { value: subject, touched: true }\r\n    })\r\n  }\r\n\r\n  onMsgChange = (message) => {\r\n    this.setState({\r\n      message: { value: message, touched: true }\r\n    })\r\n  }\r\n\r\n  validateName = () => {\r\n    const name = this.state.name.value;\r\n    if (name.trim() == '') {\r\n      return 'Please provide your name';\r\n    }\r\n  }\r\n  \r\n  validateEmailAddress = () => {\r\n    const emailAddress = this.state.emailAddress.value;\r\n    let regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    if (!emailAddress.match(regexEmail)) {\r\n      return 'Please use a valid email'; \r\n    }\r\n  }\r\n\r\n  validateSubject = () => {\r\n    const subject = this.state.subject.value;\r\n    if (subject.trim() == '') {\r\n      return 'Subject is required';\r\n    }\r\n  }\r\n\r\n  validateMsg = () => {\r\n    const message = this.state.message.value;\r\n    if (message.trim() == '') {\r\n      return 'Message is required';\r\n    }\r\n  }\r\n\r\n  resetForm = () => {\r\n    console.log(`resetForm ran!`)\r\n    this.setState({\r\n      name: { value: '', touched: false },\r\n      emailAddress: { value: '', touched: false },\r\n      subject: { value: '', touched: false },\r\n      message: { value: '', touched: false }\r\n    })\r\n  }\r\n\r\n  submitEmail = (event) => {\r\n    event.preventDefault();\r\n    const { name, emailAddress, subject, message } = this.state;\r\n    const email = { name, emailAddress, subject, message } \r\n    console.log(`submitEmail ran!`)\r\n\r\n    //POST request here- we will need to `npm i nodemailer` for backend.\r\n    //server sends the email. \r\n    fetch(`${config.API_ENDPOINT}`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(email),\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      }\r\n    })\r\n      .then(res => {\r\n        if(!res.ok) {\r\n          throw new Error('Message failed to send.');\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(data => {\r\n        this.setState({ \r\n          name: { value: email.name },\r\n          emailAddress: { value: email.emailAddress },\r\n          subject: { value: email.subject },\r\n          message: { value: email.message }\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          error: err.message,\r\n        })\r\n      })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <form id='contact-form' onSubmit={(e) => this.submitEmail(e)}>\r\n        <label id='name' htmlFor='name' className='contact-label'>Name</label>\r\n        <input\r\n          id='name'\r\n          className='contact-input'\r\n          name='name'\r\n          type='text'\r\n          placeholder='John Doe'\r\n          onChange={(e) => this.onNameChange(e.target.value)}\r\n          required\r\n        />\r\n        {this.state.name.touched && (\r\n          <Validator message={this.validateName()} />\r\n        )}\r\n        <label id='email' htmlFor='email' className='contact-label'>Email</label>\r\n        <input\r\n          id='email'\r\n          className='contact-input'\r\n          aria-describedby='emailHelp'\r\n          name='email'\r\n          type='email'\r\n          placeholder='jdoe@gmail.com'\r\n          onChange={(e) => this.onEmailAddressChange(e.target.value)}\r\n          required\r\n        />\r\n        {this.state.emailAddress.touched && (\r\n          <Validator message={this.validateEmailAddress()} />\r\n        )}\r\n        <label id='subject' htmlFor='subject' className='contact-label'>Subject</label>\r\n        <input\r\n          id='subject'\r\n          className='contact-input'\r\n          name='subject'\r\n          type='text'\r\n          placeholder='Subject'\r\n          onChange={(e) => this.onSubjectChange(e.target.value)}\r\n          required\r\n        />\r\n        {this.state.subject.touched && (\r\n          <Validator message={this.validateSubject()} />\r\n        )}\r\n        <label id='message' htmlFor='message' className='contact-label'>Message</label>\r\n        <textarea\r\n          id='message'\r\n          className='contact-input'\r\n          placeholder='Message'\r\n          name='message'\r\n          rows='7'\r\n          cols='55'\r\n          onChange={(e) => this.onMsgChange(e.target.value)}\r\n          required\r\n        />\r\n        {this.state.message.touched && (\r\n          <Validator message={this.validateMsg()} />\r\n        )}\r\n        <div className='contact-btn-controls'>\r\n          <button\r\n            className='contact-reset'\r\n            type='reset'\r\n            onClick={() => this.resetForm()}\r\n          >\r\n            Reset\r\n          </button>\r\n          <button \r\n            className='contact-submit'\r\n            type='submit'\r\n            // disabled={(this.validateName(), this.validateSubject(), this.validateMsg())}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContactForm;","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Nav\\Nav.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ImageSlider\\ImageSlider.js",["159","160","161","162"],"import React, { useState } from 'react';\r\nimport './ImageSlider.css';\r\n\r\nconst ImageSlider = ({ images }) => { // takes in images as props\r\n  const [index, setIndex] = useState(0); // create state to keep track of images index, set the default index to 0\r\n\r\n  const exampleSetTimeOut = () => {\r\n    let index = 0;\r\n    let numImages = images.length;\r\n    \r\n    let image = images[index];\r\n    index++;\r\n\r\n    //set image\r\n    if (index > numImages){\r\n      index = 0\r\n    }\r\n\r\n    //use setTimeOut to change image\r\n  }\r\n\r\n  const slideRight = () => {\r\n    setIndex((index + 1) % images.length); // increases index by 1\r\n  };\r\n\r\n  const slideLeft = () => {\r\n    const nextIndex = index - 1;\r\n    if (nextIndex < 0) {\r\n      setIndex(images.length - 1); // returns last index of images array if index is less than 0\r\n    } else {\r\n      setIndex(nextIndex);\r\n    }\r\n  };\r\n\r\n  return (\r\n    images.length > 0 && (\r\n        <img className='hero-img' src={images[index]} alt={index} />\r\n        // <button onClick={slideLeft}>{'<'}</button>\r\n        // <button onClick={slideRight}>{'>'}</button>\r\n    )\r\n  );\r\n};\r\n\r\nexport default ImageSlider;\r\n\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Icons\\Icons.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\LoginForm\\LoginForm.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\RegistrationForm\\RegistrationForm.js",["163","164"],"import React from 'react';\r\nimport config from '../../config';\r\nimport { Link } from 'react-router-dom';\r\nimport Validator from '../Validator/Validator';\r\n// import Spinner from '../Spinner/Spinner';\r\nimport './RegistrationForm.css';\r\n\r\nclass RegistrationForm extends React.Component {\r\n\r\n  state = {\r\n    user_name: {\r\n      value: '',\r\n      touched: false,\r\n      valid: null,\r\n      message: ''\r\n    },\r\n    password: {\r\n      value: '',\r\n      touched: false,\r\n      valid: null,\r\n      message: ''\r\n    },\r\n    repeatPassword: {\r\n      value: '',\r\n      touched: false,\r\n      valid: null,\r\n      message: ''\r\n    },\r\n    first_name: {\r\n      value: '',\r\n      touched: false,\r\n      valid: null,\r\n      message: ''\r\n    },\r\n    last_name: {\r\n      value: '',\r\n      touched: false,\r\n      valid: null,\r\n      message: ''\r\n    },\r\n    error: null,\r\n    // spinner: null,\r\n  }\r\n\r\n  onUsernameChange = (user_name) => {\r\n    this.setState({\r\n      user_name: { value: user_name, touched: true }\r\n    })\r\n  }\r\n\r\n  onPasswordChange = (password) => {\r\n    this.setState({\r\n      password: { value: password, touched: true }\r\n    })\r\n  }\r\n  \r\n  onRepeatPasswordChange = (repeatPassword) => {\r\n    this.setState({\r\n      repeatPassword: { value: repeatPassword, touched: true }\r\n    })\r\n  }\r\n\r\n  onFirstNameChange = (first_name) => {\r\n    this.setState({\r\n      first_name: { value: first_name, touched: true }\r\n    })\r\n  }\r\n\r\n  onLastNameChange = (last_name) => {\r\n    this.setState({\r\n      last_name: { value: last_name, touched: true }\r\n    })\r\n  }\r\n\r\n  //Take in a string value and return T/F if I have a value.\r\n  haveDataFor = (value) => {\r\n    if(value == null || typeof(value) == undefined || value === undefined || value == ''){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  validateFirstName = () => {\r\n    const first_name = this.state.first_name?.value?.trim();\r\n\r\n    if(this.haveDataFor(first_name) && first_name.indexOf(' ') > -1){\r\n      this.setState({ first_name: { value: first_name, valid: false, message: 'No spaces' } });\r\n      return false;\r\n    }\r\n\r\n    if(!this.haveDataFor(first_name)){\r\n      this.setState({ first_name: { value: first_name, valid: false, message: 'Please supply your first name' } });\r\n      return false;\r\n    }\r\n    \r\n    this.setState({ first_name: { value: first_name.trim(), valid: true , message: '' } });\r\n    return true;\r\n  }\r\n\r\n  validateLastName = () => {\r\n    const last_name = this.state.last_name?.value?.trim();\r\n\r\n    if (!this.haveDataFor(last_name)) {\r\n      this.setState({ last_name: { value: last_name, valid: false, message: 'Please supply your last name' } })\r\n      return false;\r\n    }\r\n   \r\n    this.setState({ last_name: { value: last_name.trim(), valid: true, message: '' } })\r\n    return true;\r\n  }\r\n\r\n  validateUsername = () => {\r\n    const user_name = this.state.user_name?.value?.trim();\r\n\r\n    if (!this.haveDataFor(user_name)) {\r\n      this.setState({ user_name: { value: user_name, valid: false, message: 'Please create a username' } })\r\n      return false;\r\n    }\r\n    \r\n    this.setState({ user_name: { value: user_name.trim(), valid: true, message: '' } })\r\n    return true;\r\n  }\r\n\r\n  validatePassword = () => {\r\n    const password = this.state.password?.value?.trim();\r\n    const isPasswordValid = password?.match(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?([^\\w\\s]|[_])).{8,}$/);\r\n\r\n    if(!this.haveDataFor(password)){\r\n      this.setState({ password: { value: password, valid: false, message: 'Please create a password' } })\r\n      return false;\r\n    }\r\n\r\n    if(!isPasswordValid){\r\n      this.setState({ password: { value: password, valid: false, message: 'Password must contain at least 8 characters including: at least 1 number, 1 lowercase letter, 1 uppercase letter and 1 special character' } })\r\n      return false;\r\n    }\r\n    \r\n    this.setState({ password: { value: password.trim(), valid: true, message: ''} })\r\n    return true;\r\n  }\r\n\r\n  validateRepeatPassword = () => {\r\n    const password = this.state.password?.value?.trim();\r\n    const repeatPassword = this.state.repeatPassword?.value?.trim();\r\n    const passwordsMatch = password == repeatPassword;\r\n\r\n    if(!this.haveDataFor(password) || !this.haveDataFor(repeatPassword)){\r\n      this.setState({ repeatPassword: { value: repeatPassword, valid: false , message: 'Must enter a matching password and confirmation password' } })\r\n      return false;\r\n    }\r\n\r\n    if(!passwordsMatch){\r\n      this.setState({ repeatPassword: { value: repeatPassword, valid: false , message: 'The password and confirmation password must match' } })\r\n      return false;\r\n    }\r\n\r\n    this.setState({ repeatPassword: { value: repeatPassword, valid: true , message: '' } })\r\n    return true;\r\n  }\r\n\r\n  validateInputs = () => {\r\n\r\n    const isFirstNameValid = this.validateFirstName();\r\n    const isLastNameValid = this.validateLastName();\r\n    const isUsernameValid = this.validateUsername();\r\n    const isPasswordValid = this.validatePassword();\r\n    const isRepeatPasswordValid = this.validateRepeatPassword();\r\n    \r\n    if(!isFirstNameValid || !isLastNameValid || !isUsernameValid || !isPasswordValid || !isRepeatPasswordValid){\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  hideValidator = () => {\r\n    const { user_name, password, first_name, last_name, repeatPassword } = this.state\r\n    \r\n    this.setState({\r\n      user_name: { value: user_name.value, valid: user_name.valid, message: '' }, \r\n      password: { value: password.value, valid: password.valid, message: '' },\r\n      repeatPassword: { value: repeatPassword.value, valid: repeatPassword.valid, message: '' },\r\n      first_name: { value: first_name.value, valid: first_name.valid, message: '' },\r\n      last_name: { value: last_name.value, valid: last_name.valid, message: '' },\r\n      error: null\r\n    })\r\n  }\r\n\r\n  resetForm = () => {\r\n    document.getElementById('first_name').value=''\r\n    document.getElementById('last_name').value=''\r\n    document.getElementById('user_name').value=''\r\n    document.getElementById('password').value=''\r\n    document.getElementById('repeatPassword').value=''\r\n    this.setState({\r\n      user_name: { value: '', touched: false, valid: null, message: '' },\r\n      password: { value: '', touched: false, valid: null, message: '' },\r\n      repeatPassword: { value: '', touched: false, valid: null, message: '' },\r\n      first_name: { value: '', touched: false, valid: null, message: '' },\r\n      last_name: { value: '', touched: false, valid: null, message: '' },\r\n      error: null,\r\n      // spinner: false\r\n    })\r\n  }\r\n\r\n  handleRegistration = (e) => {\r\n    e.preventDefault();\r\n    const { first_name, last_name, user_name, password } = this.state;\r\n    const newUser = { first_name: first_name.value, last_name: last_name.value, user_name: user_name.value, password: password.value };\r\n\r\n    if (this.validateInputs()){\r\n\r\n      fetch(`${config.API_ENDPOINT}/users/register`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(newUser),\r\n        headers: {\r\n          'content-type': 'application/json',\r\n        }\r\n      })\r\n        .then(res => {\r\n          if(!res.ok) {\r\n            throw new Error('Registration failed. Please try again later.');\r\n          }\r\n          return res.json()\r\n        })\r\n        .then(success => {\r\n          // this.setState({\r\n          //   spinner: false,\r\n          // })\r\n          this.props.history.push('/login')\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            error: err.message,\r\n            // spinner: false,\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  render(){\r\n    // let spinner;\r\n\r\n    let validator;\r\n\r\n    let errorMessage = this.state.first_name.message || this.state.last_name.message || this.state.user_name.message || this.state.password.message || this.state.repeatPassword.message;\r\n\r\n    if (errorMessage){\r\n      validator = <Validator hideValidator={this.hideValidator} message={errorMessage} cssClass={'invalid'}/>\r\n    }\r\n\r\n    // if(this.state.spinner){\r\n    //   spinner = <Spinner/>\r\n    // }\r\n\r\n    return (\r\n      <form id='registration-form' onSubmit={(e) => this.handleRegistration(e)}>\r\n        <h2 className='registration-h2'>Register</h2>\r\n        <label id='first_name_label' htmlFor='first_name' className='registration-label'>First Name</label>\r\n        <input\r\n          id='first_name'\r\n          className='registration-input'\r\n          name='first_name'\r\n          type='text'\r\n          onChange={(e) => this.onFirstNameChange(e.target.value)}\r\n          required\r\n        />\r\n        <label id='last_name_label' htmlFor='last_name' className='registration-label'>Last Name</label>\r\n        <input\r\n          id='last_name'\r\n          className='registration-input'\r\n          name='last_name'\r\n          type='text'\r\n          onChange={(e) => this.onLastNameChange(e.target.value)}\r\n          required\r\n        />\r\n        <label id='user_name_label' htmlFor='user_name' className='registration-label'>Username</label>\r\n        <input\r\n          id='user_name'\r\n          className='registration-input'\r\n          name='user_name'\r\n          type='text'\r\n          onChange={(e) => this.onUsernameChange(e.target.value)}\r\n          required\r\n        />\r\n        <label id='password_label' htmlFor='password' className='registration-label'>Password</label>\r\n        <input\r\n          id='password'\r\n          type='password'\r\n          className='registration-input'\r\n          name='password'\r\n          onChange={(e) => this.onPasswordChange(e.target.value)}\r\n          required\r\n        />\r\n        <label id='repeatPassword_label' htmlFor='repeatPassword' className='registration-label'>Confirm Password</label>\r\n        <input\r\n          id='repeatPassword'\r\n          type='password'\r\n          className='registration-input'\r\n          name='repeatPassword'\r\n          onChange={(e) => this.onRepeatPasswordChange(e.target.value)}\r\n          required\r\n        />\r\n        <div className='registration-btn-controls'>\r\n          <button\r\n            className='registration-reset'\r\n            type='reset'\r\n            onClick={() => this.resetForm()}\r\n          >\r\n            Reset\r\n          </button>\r\n          <button \r\n            className='registration-submit'\r\n            type='submit'\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n        <Link to='/login'>\r\n          <span className='redirect-login'>Already have an account?</span>\r\n        </Link>\r\n        {/* {spinner} */}\r\n        {validator}\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RegistrationForm;","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\RegisterPage\\RegisterPage.js",["165"],"import React from 'react';\r\nimport Logo from '../../components/Logo/Logo';\r\nimport { Link } from 'react-router-dom';\r\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\r\nimport './RegisterPage.css';\r\n\r\nexport default function RegisterPage(props) {\r\n  return (\r\n    <div className='registration-wrapper'>\r\n      <Link className='home-link' to='/'>\r\n        <Logo style={'absolute'}/>\r\n      </Link>\r\n      <RegistrationForm history={props.history}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\ContactPage\\ContactPage.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\HomePage\\HomePage.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\LoginPage\\LoginPage.js",["166"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from '../../components/Logo/Logo';\r\nimport LoginForm from '../../components/LoginForm/LoginForm';\r\nimport './LoginPage.css';\r\n\r\nexport default function LoginPage(){\r\n  return (\r\n    <div className='login-container'>\r\n      <Link to='/'>\r\n        <Logo style={'absolute'}/>\r\n      </Link>\r\n      <LoginForm />\r\n      <div className='sliding-background'></div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\UserDashboard\\UserDashboard.js",["167"],"import React from 'react';\r\nimport config from '../../config';\r\nimport Sidebar from '../../components/Sidebar/Sidebar';\r\nimport TokenService from '../../services/token-service';\r\nimport UserCourseList from '../../components/UserCourseList/UserCourseList';\r\nimport './UserDashboard.css';\r\n\r\nclass UserDashboard extends React.Component {\r\n  \r\n  state = {\r\n    error: null,\r\n    first_name: '',\r\n    userCourses: [] \r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const token = TokenService.getAuthToken()\r\n    const payload = TokenService.getPayload()\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'session_token': token\r\n      }\r\n    }\r\n    \r\n    fetch(`${config.API_ENDPOINT}/users/validate`, options)\r\n      .then(res => { \r\n        if (!res.ok){\r\n          throw new Error(res.statusText)\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(responseJson => {   \r\n        this.setState({\r\n          first_name: payload.first_name\r\n        })\r\n        return fetch(`${config.API_ENDPOINT}/user/courses`, options)\r\n      })\r\n      .then(res => { \r\n        if (!res.ok){\r\n          throw new Error(res.statusText)\r\n        }\r\n        return res.json(); \r\n      })\r\n      .then(userCourses => {\r\n        this.setState({\r\n          userCourses: userCourses\r\n        })\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          error: err.message\r\n        })\r\n        TokenService.clearAuthToken();\r\n        this.props.history.push('/login');\r\n      })\r\n\r\n  }\r\n\r\n  viewCourseDetail = (course_id) => {\r\n    this.props.history.push(`/user/course/${course_id}`)\r\n  }\r\n\r\n  removeCourse = (course_id) => {\r\n    const newCourses = this.state.userCourses.filter((course) => course.CourseId !== course_id);\r\n    this.setState({\r\n      userCourses: newCourses\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { first_name } = this.state\r\n    let listJsx = null\r\n\r\n    if(this.state.userCourses == 0){\r\n      listJsx = <div className='null-courses'>No courses to display</div>\r\n    }\r\n\r\n    return (\r\n      <div className='dashboard-container'>\r\n        <Sidebar history={this.props.history}/>\r\n        <header className='dashboard-header'>\r\n          <h1 className='dashboard-greeting'>Hello, {first_name}</h1>\r\n        </header>\r\n        <span className='dashboard-span'>Use the 'Find Courses' search tool to find\r\n        available course offerings from bootcamps in your area.</span>\r\n        <h2 className='userCourses-header'>My Courses</h2>\r\n        {listJsx}\r\n        <UserCourseList userCourses={this.state.userCourses} history={this.props.history} viewCourseDetail={this.viewCourseDetail} removeCourse={this.removeCourse}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserDashboard;","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\NotFoundPage\\NotFoundPage.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Validator\\Validator.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Sidebar\\Sidebar.js",["168"],"import React, { useState } from 'react';\r\nimport TokenService from '../../services/token-service';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as HiIcons from 'react-icons/hi';\r\nimport { Link } from 'react-router-dom';\r\nimport { SidebarData } from './SidebarData';\r\nimport { IconContext } from 'react-icons';\r\nimport './Sidebar.css';\r\n\r\nexport default function Sidebar(props) {\r\n  const [sidebar, setSidebar] = useState(false);\r\n\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n\r\n  const logout = () => {\r\n    TokenService.clearAuthToken()\r\n    props.history.push('/login')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: '#fff' }}>\r\n        <div className='sidebar'>\r\n          <Link to='#' className='menu-bars'>\r\n            <FaIcons.FaBars onClick={showSidebar} />\r\n          </Link>\r\n        </div>\r\n        <nav className={sidebar ? 'side-menu active' : 'side-menu'}>\r\n          <ul className='side-menu-items' onClick={showSidebar}>\r\n            <li className='side-menu-toggle'>\r\n              <Link to='#' className='menu-bars'>\r\n                <AiIcons.AiOutlineClose />\r\n              </Link>\r\n            </li>\r\n            {SidebarData.map((item, index) => {\r\n              return (\r\n                <li key={index} className={item.cName}>\r\n                  <Link className='sidebar-link' to={item.path}>\r\n                    {item.icon}\r\n                    <span className='sidebar-span'>{item.title}</span>\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n            <li className='nav-text'><a href='#' onClick={() => logout()}><HiIcons.HiLogout /><span className='sidebar-span'>Logout</span></a></li>\r\n          </ul>\r\n        </nav>\r\n      </IconContext.Provider>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Sidebar\\SidebarData.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\SearchPage\\SearchPage.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\SearchForm\\SearchForm.js",["169","170"],"import React from 'react';\r\nimport config from '../../config';\r\nimport TokenService from '../../services/token-service';\r\n// import Spinner from '../Spinner/Spinner'\r\nimport Validator from '../Validator/Validator';\r\nimport './SearchForm.css';\r\n\r\nclass SearchForm extends React.Component {\r\n\r\n  state = {\r\n    error: null,\r\n    // spinner: null,\r\n    message: '',\r\n    stateCode: '',\r\n    is_online: true,\r\n    prior_experience: false,\r\n    schedule: 'full_time',\r\n    fin_assist: true\r\n  }\r\n\r\n  onStateCodeChange = (stateCode) => {\r\n    this.setState({\r\n      stateCode: stateCode.toUpperCase()\r\n    })\r\n  }\r\n\r\n  onIsOnlineChange = (input) => {\r\n    this.setState({\r\n      is_online: Boolean(JSON.parse(input))\r\n    })\r\n  }\r\n\r\n  onPriorExperienceChange = (input) => {\r\n    this.setState({\r\n      prior_experience: Boolean(JSON.parse(input))\r\n    })\r\n  }\r\n\r\n  onScheduleChange = (schedule) => {\r\n    this.setState({\r\n      schedule: schedule \r\n    })\r\n  }\r\n  \r\n  onFinAssistChange = (input) => {\r\n\r\n    //if true, leave as it is. User needs to only see courses that offer financing\r\n    if (input == 'true') {\r\n      this.setState({\r\n        fin_assist: Boolean(JSON.parse(input))\r\n      })\r\n    } else { //if false, we need to show all courses, regardless if they offer financing, so we coerce the value to true.\r\n      this.setState({\r\n        fin_assist: true\r\n      })\r\n    }\r\n  } \r\n\r\n  validateStateCode = () => {\r\n    const stateCode = this.state.stateCode;\r\n\r\n    if(stateCode == null || typeof(stateCode) == undefined){\r\n      this.setState({ message: 'Please enter a valid 2 letter state code' })\r\n      return false;\r\n    }\r\n\r\n    if (stateCode.length != 2 || !stateCode.match('^(?:(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]))$')) {\r\n      this.setState({ message: 'Please enter a valid 2 letter state code' })\r\n      return false;\r\n    } \r\n\r\n    this.setState({ message: '' })\r\n    return true;\r\n  }\r\n\r\n  //conditionally displays Validator UI on a timer\r\n  hideValidator = () => {\r\n    this.setState({\r\n      message: '',\r\n      error: null\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { stateCode, prior_experience, is_online, schedule, fin_assist } = this.state;\r\n    const searchQuery = { stateCode, is_online, prior_experience, schedule, fin_assist };\r\n\r\n    // this.setState({\r\n    //   spinner: true\r\n    // }) \r\n    \r\n    if (this.validateStateCode()) {\r\n      fetch(`${config.API_ENDPOINT}/search`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(searchQuery),\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          'session_token': TokenService.getAuthToken()\r\n        }\r\n      })\r\n        .then(res => {\r\n          if (!res.ok) {\r\n            throw new Error('Something went wrong, please try again later');\r\n          }\r\n          return res.json();\r\n        })\r\n        .then(searchResults => {\r\n          // this.setState({\r\n          //   spinner: false //set to true for spinner testing\r\n          // })\r\n          sessionStorage.setItem('searchResults', JSON.stringify(searchResults))\r\n          this.props.history.push('/results') //comment out for spinner testing\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            error: err.message,\r\n            // spinner: false\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // let spinner;\r\n    let validator;\r\n\r\n    if(this.state.message){\r\n      validator = <Validator hideValidator={this.hideValidator} message={this.state.message} cssClass={'invalid'}/>\r\n    }\r\n\r\n    // if(this.state.spinner){\r\n    //   spinner = <Spinner/>\r\n    // }\r\n\r\n    return (\r\n      <>\r\n        <form id='search-form' onSubmit={(e) => this.handleSubmit(e)}>\r\n          <div id='state-wrapper' className='form-wrapper'>\r\n            <label id='state-label' className='search-label' htmlFor='states-input'>Please select a state:</label>\r\n            <input id='states-input' list='states' name='states-input' maxLength='2' required onChange={(e) => this.onStateCodeChange(e.target.value)}></input>\r\n            <datalist id='states' type='text'>\r\n              <option value='AL'>Alabama</option>\r\n              <option value='AK'>Alaska</option>\r\n              <option value='AZ'>Arizona</option>\r\n              <option value='AR'>Arkansas</option>\r\n              <option value='CA'>California</option>\r\n              <option value='CO'>Colorado</option>\r\n              <option value='CT'>Connecticut</option>\r\n              <option value='DE'>Delaware</option>\r\n              <option value='FL'>Florida</option>\r\n              <option value='GA'>Georgia</option>\r\n              <option value='HI'>Hawaii</option>\r\n              <option value='ID'>Idaho</option>\r\n              <option value='IL'>Illinois</option>\r\n              <option value='IN'>Indiana</option>\r\n              <option value='IA'>Iowa</option>\r\n              <option value='KS'>Kansas</option>\r\n              <option value='KY'>Kentucky</option>\r\n              <option value='LA'>Louisiana</option>\r\n              <option value='ME'>Maine</option>\r\n              <option value='MD'>Maryland</option>\r\n              <option value='MA'>Massachusetts</option>\r\n              <option value='MI'>Michigan</option>\r\n              <option value='MN'>Minnesota</option>\r\n              <option value='MS'>Mississippi</option>\r\n              <option value='MO'>Missouri</option>\r\n              <option value='MT'>Montana</option>\r\n              <option value='NE'>Nebraska</option>\r\n              <option value='NV'>Nevada</option>\r\n              <option value='NH'>New Hampshire</option>\r\n              <option value='NJ'>New Jersey</option>\r\n              <option value='NM'>New Mexico</option>\r\n              <option value='NY'>New York</option>\r\n              <option value='NC'>North Carolina</option>\r\n              <option value='ND'>North Dakota</option>\r\n              <option value='OH'>Ohio</option>\r\n              <option value='OK'>Oklahoma</option>\r\n              <option value='OR'>Oregon</option>\r\n              <option value='PA'>Pennslyvania</option>\r\n              <option value='RI'>Rhode Island</option>\r\n              <option value='SC'>South Carolina</option>\r\n              <option value='SD'>South Dakota</option>\r\n              <option value='TN'>Tennessee</option>\r\n              <option value='TX'>Texas</option>\r\n              <option value='UT'>Utah</option>\r\n              <option value='VT'>Vermont</option>\r\n              <option value='VA'>Virginia</option>\r\n              <option value='WA'>Washington</option>\r\n              <option value='WV'>West Virginia</option>\r\n              <option value='WI'>Wisconsin</option>\r\n              <option value='WY'>Wyoming</option>\r\n            </datalist>\r\n          </div>\r\n          <div className='form-wrapper'>\r\n            <label id='online-label' className='search-label' htmlFor='online'>1. Do you prefer a course that is offered online?</label>\r\n            <select id='online' onChange={(e) => this.onIsOnlineChange(e.target.value)} required>\r\n              <option value='true'>Yes</option>\r\n              <option value='false'>No</option>\r\n            </select>\r\n          </div>\r\n          <div className='form-wrapper'>\r\n            <label id='experience-label' className='search-label' htmlFor='experience'>2. Do you want to view courses that require prior programming experience?</label>\r\n            <select id='experience' onChange={(e) => this.onPriorExperienceChange(e.target.value)} required>\r\n              <option value='false'>No</option>\r\n              <option value='true'>Yes</option>\r\n            </select>\r\n          </div>\r\n          <div className='form-wrapper'>\r\n            <label id='schedules-label' className='search-label' htmlFor='schedules'>3. What course schedule can you commit to?</label>\r\n            <select id='schedules' onChange={(e) => this.onScheduleChange(e.target.value)} required>\r\n              <option value='full_time'>Full-time (40+ hrs/wk)</option>\r\n              <option value='part_time'>Part-time (~25 hrs/wk)</option>\r\n            </select>\r\n          </div>\r\n          <div className='form-wrapper'>\r\n            <label id='fin-assist-label' className='search-label' htmlFor='financial-assistance'>4. Do you require a course that offers financial assistance?</label>\r\n            <select id='financial-assistance' onChange={(e) => this.onFinAssistChange(e.target.value)} required>\r\n              <option value='true'>Yes</option>\r\n              <option value='false'>No</option>\r\n            </select> \r\n          </div>\r\n          <div className='search-form-controls'>\r\n            <button id='search-submit' type='submit'>Search</button>\r\n          </div>\r\n          <div className='error-msg'>{this.state.error}</div>\r\n        </form>\r\n        {validator}\r\n        {/* {spinner} */}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchForm;\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\ResultsPage\\ResultsPage.js",["171"],"import React from 'react';\r\nimport config from '../../config';\r\nimport Sidebar from '../../components/Sidebar/Sidebar';\r\nimport TokenService from '../../services/token-service';\r\nimport ResultsList from '../../components/ResultsList/ResultsList';\r\nimport './ResultsPage.css';\r\n\r\nclass ResultsPage extends React.Component {\r\n\r\n  state = {\r\n    error: null,\r\n    bootcamps: []\r\n  }\r\n\r\n  checkSearchResults = () => {\r\n    let searchResults = sessionStorage.getItem('searchResults')\r\n    \r\n    if(searchResults == null || JSON.parse(searchResults).length == 0){\r\n      //if no results push to NotFound\r\n      this.props.history.push('/redirect')\r\n      return;\r\n    }\r\n\r\n    //convert results from JSON to object using JSON.parse() & store in state\r\n    this.setState({ bootcamps: JSON.parse(searchResults) })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'session_token' : TokenService.getAuthToken()\r\n      }\r\n    }\r\n\r\n    fetch(`${config.API_ENDPOINT}/users/validate`, options)\r\n      .then(res => {\r\n        if (!res.ok){\r\n          throw new Error(res.statusText)\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(() => {\r\n        this.checkSearchResults();\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          error: err.message\r\n        })\r\n        TokenService.clearAuthToken();\r\n        this.props.history.push('/login');\r\n      })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='results-page-container'>\r\n        <Sidebar history={this.props.history}/>\r\n        <ResultsList bootcamps={this.state.bootcamps} history={this.props.history}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ResultsPage;\r\n\r\n// addCourse={this.addCourse}","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ResultsList\\ResultsList.js",["172"],"import React from 'react';\r\nimport config from '../../config';\r\nimport TokenService from '../../services/token-service';\r\nimport ResultItem from '../ResultItem/ResultItem';\r\nimport Validator from '../../components/Validator/Validator';\r\nimport './ResultsList.css';\r\n\r\nexport default class ResultsList extends React.Component {\r\n\r\n  state = {\r\n    error: null,\r\n    message: ''\r\n  }\r\n\r\n  hideValidator = () => {\r\n    this.setState({\r\n      message: '',\r\n      error: null\r\n    })\r\n  }\r\n  \r\n  addCourse = (bootcampName, course) => {\r\n\r\n    let campObject = {\r\n      UserName: TokenService.getPayload().user_name,\r\n      Bootcamp: bootcampName,\r\n      Course: course\r\n    }\r\n\r\n    fetch(`${config.API_ENDPOINT}/user/courses`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(campObject), //we get course name from here\r\n      headers: {\r\n        'content-type': 'application/json', \r\n        'session_token': TokenService.getAuthToken() //we get user_name from here\r\n      }\r\n    }) \r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error('Error: Cannot add duplicate course.');\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(course => {\r\n        this.setState({\r\n          message: 'Course added!'\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          error: err.message,\r\n        })\r\n      })\r\n  }\r\n\r\n  render(){\r\n    let validator;\r\n\r\n    if(this.state.message){\r\n      validator = <Validator hideValidator={this.hideValidator} message={this.state.message} cssClass={'green'}/>\r\n    }\r\n    \r\n    if(this.state.error){\r\n      validator = <Validator hideValidator={this.hideValidator} message={this.state.error} cssClass={'invalid'}/>\r\n    }\r\n\r\n    return (\r\n      <section className='results-container'>\r\n        {validator}\r\n        {this.props.bootcamps.map((bootcamp, i) => (\r\n          <ResultItem\r\n            key={i}\r\n            Bootcamp={bootcamp.Name}\r\n            Website={bootcamp.Website}\r\n            Locations={bootcamp.Locations.map((l, i) => {\r\n              return (\r\n              <div\r\n                className='item-location' \r\n                key={i}\r\n              >\r\n                {l.city}, {l.state}\r\n              </div>\r\n              )\r\n            })}\r\n            Courses={bootcamp.Courses.map((c, j) => {\r\n              \r\n              let ui = {\r\n                ScheduleType: 'Part time',\r\n                Is_online: <i className='far fa-times-circle'></i>,\r\n                Solo_instruction: <i className='far fa-times-circle'></i>,\r\n                Pair_programming: <i className='far fa-times-circle'></i>,\r\n                Prior_experience: <i className='far fa-times-circle'></i>,\r\n                Payment : {\r\n                  Financing: <i className='far fa-times-circle'></i>,\r\n                  Isa: <i className='far fa-times-circle'></i>,\r\n                  Placement_based: <i className='far fa-times-circle'></i>,\r\n                  Repayment_guarantee: <i className='far fa-times-circle'></i>\r\n                }\r\n              }\r\n\r\n              //schedule\r\n              if (c.Schedule.Type == 'full_time'){\r\n                ui.ScheduleType = 'Full time'\r\n              } \r\n\r\n              if(c.Is_online){\r\n                ui.Is_online = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              if(c.Solo_instruction){\r\n                ui.Solo_instruction = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              if(c.Pair_programming){\r\n                ui.Pair_programming = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              if(c.Prior_experience){\r\n                ui.Prior_experience = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              //payment plan\r\n              if(c.PaymentSummary.Financing){\r\n                ui.Payment.Financing = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              if(c.PaymentSummary.Isa){\r\n                ui.Payment.Isa = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              if(c.PaymentSummary.Placement_based){\r\n                ui.Payment.Placement_based = <i className='far fa-check-circle'></i>\r\n              } \r\n\r\n              if(c.PaymentSummary.Repayment_guarantee){\r\n                ui.Payment.Repayment_guarantee = <i className='far fa-check-circle'></i>\r\n              } \r\n           \r\n              return (\r\n                <div className='course-wrapper' key={j}>\r\n                  <div className='header-wrapper'>\r\n                    <h4 className='course-header'>{j+1}. {c.Name}</h4>\r\n                  </div>\r\n                  <table className='table-top'> \r\n                    <tbody>\r\n                      <tr>\r\n                        <td className='left'>Schedule:</td>\r\n                        <td className='right'>{ui.ScheduleType}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className='left'>Hours:</td>\r\n                        <td className='right'>{c.Schedule.Hours}/week</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className='left'>Duration:</td>\r\n                        <td className='right'>{c.Schedule.Duration} weeks</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className='left'>Online</td>\r\n                        <td className='center'>{ui.Is_online}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className='left'>Solo Instruction:</td>\r\n                        <td className='center'>{ui.Solo_instruction}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className='left'>Pair Programming:</td>\r\n                        <td className='center'>{ui.Pair_programming}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className='left'>Prior Experience</td>\r\n                        <td className='center'>{ui.Prior_experience}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                  <div className='languages-container'>\r\n                    <h5 className='languages-header'>Languages covered</h5>\r\n                    <ul className='language-ul'>\r\n                      {c.Languages.map((la, k) => {\r\n                        return (\r\n                          <li className='language-li' key={k}>\r\n                            {la}\r\n                          </li>\r\n                        )\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                  <div className='payment-wrapper'>\r\n                  <h5 className='payment-header'>Payment Summary</h5>\r\n                    <table className='table-bottom'>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td className='left'>Upfront Cost:</td>\r\n                          <td className='right'>${c.PaymentSummary.Up_front}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className='left'>Financing available:</td>\r\n                          <td className='center'>{ui.Payment.Financing}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className='left'>Income Sharing Agreement:</td>\r\n                          <td className='center'>{ui.Payment.Isa}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className='left'>Placement-based Plan:</td>\r\n                          <td className='center'>{ui.Payment.Placement_based}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className='left'>Repayment Guarantee:</td>\r\n                          <td className='center'>{ui.Payment.Repayment_guarantee}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <button className='course-add-btn' type='button' onClick={() => this.addCourse(bootcamp.Name, c)}>Add to MyCourses</button>\r\n                </div>\r\n              )\r\n            })}\r\n          />\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\ResultItem\\ResultItem.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\routes\\CourseDetailPage\\CourseDetailPage.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\UserCourseList\\UserCourseList.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\UserCourseListItem\\UserCourseListItem.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\CourseDetail\\CourseDetail.js",["173","174"],"import React from 'react';\r\nimport './CourseDetail.css';\r\n\r\nclass CourseDetail extends React.Component {\r\n\r\n  goToDashboard = () => {\r\n    this.props.history.push('/dashboard');\r\n  }\r\n\r\n  render(){\r\n    const course = this.props.currentCourse;\r\n\r\n    if(course.Course == undefined){\r\n      return <></>\r\n    }\r\n\r\n    let ui = {\r\n      ScheduleType: 'Part time',\r\n      Is_online: <i className=\"far fa-times-circle\"></i>,\r\n      Solo_instruction: <i className=\"far fa-times-circle\"></i>,\r\n      Pair_programming: <i className=\"far fa-times-circle\"></i>,\r\n      Prior_experience: <i className=\"far fa-times-circle\"></i>,\r\n      Payment : {\r\n        Financing: <i className=\"far fa-times-circle\"></i>,\r\n        Isa: <i className=\"far fa-times-circle\"></i>,\r\n        Placement_based: <i className=\"far fa-times-circle\"></i>,\r\n        Repayment_guarantee: <i className=\"far fa-times-circle\"></i>\r\n      }\r\n    }\r\n\r\n    //schedule\r\n    if (course.Schedule.type == 'full_time'){\r\n      ui.ScheduleType = 'Full time'\r\n    } \r\n\r\n    if(course.Course.is_online){\r\n      ui.Is_online = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    if(course.Course.solo_instruction){\r\n      ui.Solo_instruction = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    if(course.Course.pair_programming){\r\n      ui.Pair_programming = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    if(course.Course.prior_experience){\r\n      ui.Prior_experience = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    //payment plan\r\n    if(course.PaymentSummary.financing){\r\n      ui.Payment.Financing = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    if(course.PaymentSummary.isa){\r\n      ui.Payment.Isa = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    if(course.PaymentSummary.placement_based){\r\n      ui.Payment.Placement_based = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    if(course.PaymentSummary.repayment_guarantee){\r\n      ui.Payment.Repayment_guarantee = <i className=\"far fa-check-circle\"></i>\r\n    } \r\n\r\n    return (\r\n      <div className='detail-wrapper'>\r\n        <h3 className='detail-header'>{course.Course.name}</h3>\r\n        <table className='detail-table-top'> \r\n          <tbody>\r\n            <tr>\r\n              <td className='detail-left'>Schedule:</td>\r\n              <td className='detail-right'>{ui.ScheduleType}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className='detail-left'>Hours:</td>\r\n              <td className='detail-right'>{course.Schedule.hours}/week</td>\r\n            </tr>\r\n            <tr>\r\n              <td className='detail-left'>Duration:</td>\r\n              <td className='detail-right'>{course.Schedule.duration} weeks</td>\r\n            </tr>\r\n            <tr>\r\n              <td className='detail-left'>Online</td>\r\n              <td className='detail-center'>{ui.Is_online}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className='detail-left'>Solo Instruction:</td>\r\n              <td className='detail-center'>{ui.Solo_instruction}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className='detail-left'>Pair Programming:</td>\r\n              <td className='detail-center'>{ui.Pair_programming}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className='detail-left'>Prior Experience:</td>\r\n              <td className='detail-center'>{ui.Prior_experience}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div className='detail-languages-wrapper'>\r\n          <h4 className='detail-languages-header'>Languages covered</h4>\r\n          <ul className=\"detail-language-ul\">\r\n            {course.Languages.map((la, k) => {\r\n              return (\r\n                <li className=\"detail-language-li\" key={k}>\r\n                  {la}\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </div>\r\n        <div className='detail-payment-wrapper'>\r\n        <h4 className='detail-payment-header'>Payment Summary</h4>\r\n          <table className='detail-table-bottom'>\r\n            <tbody>\r\n              <tr>\r\n                <td className='detail-left'>Upfront Cost:</td>\r\n                <td className='detail-right'>${course.PaymentSummary.up_front}</td>\r\n              </tr>\r\n              <tr>\r\n                <td className='detail-left'>Financing available:</td>\r\n                <td className='detail-center'>{ui.Payment.Financing}</td>\r\n              </tr>\r\n              <tr>\r\n                <td className='detail-left'>Income Sharing Agreement:</td>\r\n                <td className='detail-center'>{ui.Payment.Isa}</td>\r\n              </tr>\r\n              <tr>\r\n                <td className='detail-left'>Placement-based Plan:</td>\r\n                <td className='detail-center'>{ui.Payment.Placement_based}</td>\r\n              </tr>\r\n              <tr>\r\n                <td className='detail-left'>Repayment Guarantee:</td>\r\n                <td className='detail-center'>{ui.Payment.Repayment_guarantee}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n          <div className='course-detail-controls'>\r\n            <button className=\"redirect-dashboard-btn\" type=\"button\" onClick={() => this.goToDashboard()}>Go Back</button>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CourseDetail;\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\codecampfinder\\src\\components\\Spinner\\Spinner.js",[],["175","176"],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":1,"column":1,"nodeType":"183","endLine":3,"endColumn":2},{"ruleId":"181","severity":1,"message":"182","line":1,"column":1,"nodeType":"183","endLine":4,"endColumn":2},{"ruleId":"177","replacedBy":"184"},{"ruleId":"179","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":53,"column":21,"nodeType":"188","messageId":"189","endLine":53,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":60,"column":29,"nodeType":"192","messageId":"193","endLine":60,"endColumn":30,"suggestions":"194"},{"ruleId":"190","severity":1,"message":"191","line":60,"column":45,"nodeType":"192","messageId":"193","endLine":60,"endColumn":46,"suggestions":"195"},{"ruleId":"186","severity":1,"message":"187","line":68,"column":24,"nodeType":"188","messageId":"189","endLine":68,"endColumn":26},{"ruleId":"186","severity":1,"message":"187","line":75,"column":24,"nodeType":"188","messageId":"189","endLine":75,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":7,"column":9,"nodeType":"198","messageId":"199","endLine":7,"endColumn":26},{"ruleId":"196","severity":1,"message":"200","line":11,"column":9,"nodeType":"198","messageId":"199","endLine":11,"endColumn":14},{"ruleId":"196","severity":1,"message":"201","line":22,"column":9,"nodeType":"198","messageId":"199","endLine":22,"endColumn":19},{"ruleId":"196","severity":1,"message":"202","line":26,"column":9,"nodeType":"198","messageId":"199","endLine":26,"endColumn":18},{"ruleId":"186","severity":1,"message":"187","line":77,"column":84,"nodeType":"188","messageId":"189","endLine":77,"endColumn":86},{"ruleId":"186","severity":1,"message":"187","line":145,"column":37,"nodeType":"188","messageId":"189","endLine":145,"endColumn":39},{"ruleId":"203","severity":1,"message":"204","line":11,"column":15,"nodeType":"205","endLine":11,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":11,"column":15,"nodeType":"205","endLine":11,"endColumn":33},{"ruleId":"186","severity":1,"message":"187","line":76,"column":31,"nodeType":"188","messageId":"189","endLine":76,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":46,"column":38,"nodeType":"208","endLine":46,"endColumn":75},{"ruleId":"186","severity":1,"message":"187","line":48,"column":15,"nodeType":"188","messageId":"189","endLine":48,"endColumn":17},{"ruleId":"186","severity":1,"message":"209","line":67,"column":26,"nodeType":"188","messageId":"189","endLine":67,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":18,"column":66,"nodeType":"188","messageId":"189","endLine":18,"endColumn":68},{"ruleId":"186","severity":1,"message":"187","line":102,"column":35,"nodeType":"188","messageId":"189","endLine":102,"endColumn":37},{"ruleId":"186","severity":1,"message":"187","line":13,"column":22,"nodeType":"188","messageId":"189","endLine":13,"endColumn":24},{"ruleId":"186","severity":1,"message":"187","line":32,"column":30,"nodeType":"188","messageId":"189","endLine":32,"endColumn":32},{"ruleId":"177","replacedBy":"210"},{"ruleId":"179","replacedBy":"211"},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["212"],["213"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["214","215"],["216","217"],"no-unused-vars","'exampleSetTimeOut' is assigned a value but never used.","Identifier","unusedVar","'image' is assigned a value but never used.","'slideRight' is assigned a value but never used.","'slideLeft' is assigned a value but never used.","react/style-prop-object","Style prop value must be an object","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Expected '!==' and instead saw '!='.",["212"],["213"],"no-global-assign","no-unsafe-negation",{"messageId":"218","fix":"219","desc":"220"},{"messageId":"221","fix":"222","desc":"223"},{"messageId":"218","fix":"224","desc":"220"},{"messageId":"221","fix":"225","desc":"223"},"removeEscape",{"range":"226","text":"227"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"228","text":"229"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"230","text":"227"},{"range":"231","text":"229"},[1256,1257],"",[1256,1256],"\\",[1272,1273],[1272,1272]]